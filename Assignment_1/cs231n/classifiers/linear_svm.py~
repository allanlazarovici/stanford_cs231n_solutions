import numpy as np
from random import shuffle

def svm_loss_naive(W, X, y, reg):
  """
  Structured SVM loss function, naive implementation (with loops)
  Inputs:
  - W: C x D array of weights
  - X: D x N array of data. Data are D-dimensional columns
  - y: 1-dimensional array of length N with labels 0...K-1, for K classes
  - reg: (float) regularization strength
  Returns:
  a tuple of:
  - loss as single float
  - gradient with respect to weights W; an array of same shape as W
  """
  dW = np.zeros(W.shape) # initialize the gradient as zero

  # compute the loss and the gradient
  num_classes = W.shape[0]
  num_train = X.shape[1]
  loss = 0.0
  for i in xrange(num_train):
    scores = W.dot(X[:, i])
    correct_class_score = scores[y[i]]
    for j in xrange(num_classes):
      if j == y[i]:
        continue
      margin = scores[j] - correct_class_score + 1 # note delta = 1
      if margin > 0:
        loss += margin
        dW[j] += X[:,i] #update the gradient for the class weights
        dW[ y[i] ] -= X[:,i]#update the gradient for the correct class weights

  # Right now the loss is a sum over all training examples, but we want it
  # to be an average instead so we divide by num_train.
  loss /= num_train

  # Add regularization to the loss.
  loss += 0.5 * reg * np.sum(W * W)

  #############################################################################
  # TODO:                                                                     #
  # Compute the gradient of the loss function and store it dW.                #
  # Rather that first computing the loss and then computing the derivative,   #
  # it may be simpler to compute the derivative at the same time that the     #
  # loss is being computed. As a result you may need to modify some of the    #
  # code above to compute the gradient.                                       #
  #############################################################################
  dW = dW/num_train
  dW += reg*W

  return loss, dW


def svm_loss_vectorized(W, X, y, reg):
  """
  Structured SVM loss function, vectorized implementation.

  Inputs and outputs are the same as svm_loss_naive.
  """
  loss = 0.0
  dW = np.zeros(W.shape) # initialize the gradient as zero

  #############################################################################
  # TODO:                                                                     #
  # Implement a vectorized version of the structured SVM loss, storing the    #
  # result in loss.                                                           #
  #############################################################################
  P = np.dot(W, X)
  p = [ np.dot(W[y_i], X[:,i]) for i, y_i in enumerate(y) ]
  P = P - p
  P = P + 1
  P[P < 0] = 0 #apply the max(0, ...) function

  N = X.shape[1]
  C = W.shape[0]
  ##Build 2d mask for positions of y_i in P matrix
  def insert_true(i):
    a = [False]*C
    a[i] = True
    return(a)

  index = np.transpose(np.array( map(insert_true, y) ))
  P[index] = 0 #The y_i entries are set to 0

  loss = loss + np.sum(P)/N
  loss = loss + 0.5*reg*( np.sum(W*W))
  #############################################################################
  #                             END OF YOUR CODE                              #
  #############################################################################


  #############################################################################
  # TODO:                                                                     #
  # Implement a vectorized version of the gradient for the structured SVM     #
  # loss, storing the result in dW.                                           #
  #                                                                           #
  # Hint: Instead of computing the gradient from scratch, it may be easier    #
  # to reuse some of the intermediate values that you used to compute the     #
  # loss.                                                                     #
  #############################################################################
  B = P > 0
  B = B.astype(int)
  B[y, np.array(range(N))] = -np.sum(B, axis=0)

  dW = np.dot(B, np.transpose(X))

  dW = dW/N
  dW += reg*W
  #############################################################################
  #                             END OF YOUR CODE                              #
  #############################################################################

  return loss, dW

#dW =  np.zeros(W.shape)
#def gen_dw(i):
#  x_i = X[:,i]
#  bool_vector = B[:,i]
#  dW[bool_vector] += x_i
#  dW[ y[i] ] += -x_i*(np.sum(bool_vector))
  
#map(gen_dw, range(N))
#dW = dW/N
#dW += reg*W
